.TH "SnapRAID Backup For Disk Arrays" 1
.SH NAME
snapraid \(hy SnapRAID Backup For Disk Arrays
.SH SYNOPSIS 
snapraid [\(hyc, \(hy\(hyconf CONFIG]
.PD 0
.PP
.PD
	[\(hyf, \(hy\(hyfilter PATTERN] [\(hyd, \(hy\(hyfilter\(hydisk NAME] [\(hym, \(hy\(hyfilter\(hymissing]
.PD 0
.PP
.PD
	[\(hya, \(hy\(hyaudit\(hyonly] [\(hyi, \(hy\(hyimport DIR]
.PD 0
.PP
.PD
	[\(hyN, \(hy\(hyfind\(hyby\(hyname]
.PD 0
.PP
.PD
	[\(hyZ, \(hy\(hyforce\(hyzero] [\(hyE, \(hy\(hyforce\(hyempty]
.PD 0
.PP
.PD
	[\(hys, \(hy\(hystart BLKSTART] [\(hyt, \(hy\(hycount BLKCOUNT]
.PD 0
.PP
.PD
	[\(hyv, \(hy\(hyverbose] [\(hyl, \(hy\(hylog FILE]
.PD 0
.PP
.PD
	sync|pool|diff|dup|check|fix
.PD 0
.PP
.PD
.PP
snapraid [\(hyV, \(hy\(hyversion] [\(hyh, \(hy\(hyhelp]
.PD 0
.PP
.PD
.SH DESCRIPTION 
SnapRAID is a backup program for a disk array.
.PP
SnapRAID stores redundancy information in the disk array,
and it allows recovering from up to two disk failures.
.PP
SnapRAID is mainly targeted for a home media center, where you have
a lot of big files that rarely change.
.PP
Beside the ability to recover from disk failures, the other
features of SnapRAID are:
.PD 0
.IP \(bu
You can start using SnapRAID with already filled disks.
.IP \(bu
The disks can have different sizes.
.IP \(bu
You can add disks at any time.
.IP \(bu
If you accidentally delete some files in a disk, you can
recover them.
.IP \(bu
If more than two disks fail, you lose the data only on the
failed disks. All the data in the other disks is safe.
.IP \(bu
It doesn\(cqt lock\(hyin your data. You can stop using SnapRAID at any
time without the need to reformat or move data.
.IP \(bu
All your data is hashed to ensure data integrity and to avoid
silent corruption.
.PD
.PP
The official site of SnapRAID is:
.PP
.RS 4
http://snapraid.sourceforge.net
.PD 0
.PP
.PD
.RE
.SH LIMITATIONS 
SnapRAID is in between a RAID and a Backup program trying to get the best
benefits of them. Although it also has some limitations that you should
consider before using it.
.PP
The main one is that if a disk fails, and you haven\(cqt recently synced,
you may not able to do a complete recover.
More specifically, you may be unable to recover up to the size of the
amount of the changed or deleted files from the last sync operation.
This happens even if the files changed or deleted are not in the
failed disk.
New added files don\(cqt prevent the recovering of the already existing
files. You may only lose the just added files, if they are on the failed
disk.
.PP
This is the reason because SnapRAID is better suited for data that
rarely change.
.PP
Other limitations are:
.PD 0
.IP \(bu
You have different file\(hysystems for each disk.
Using a RAID you have only a big file\(hysystem.
.IP \(bu
It doesn\(cqt stripe data.
With RAID you get a speed boost with striping.
.IP \(bu
It doesn\(cqt support real\(hytime recovery.
With RAID you do not have to stop working when a disk fails.
.IP \(bu
It\(cqs able to recover damages only from up to two disks.
With a Backup you are able to recover from a complete
failure of the whole disk array.
.IP \(bu
Only file, timestamps, symlinks and hardlinks are saved.
Permissions, ownership and extended attributes are not saved.
.PD
.SH GETTING STARTED 
To use SnapRAID you need to first select one disk of your disk array
to dedicate at the \(a"parity\(a" information. With one disk for parity you
will be able to recover from a single disk failure, like RAID5.
.PP
If you want to recover from two disk failures, like RAID6, you must
reserve another disk for the \(a"q\(hyparity\(a" information.
.PP
As parity disks, you have to pick the biggest disks in the array,
as the redundancy information may grow in size as the biggest data
disk in the array.
.PP
These disks will be dedicated to store the \(a"parity\(a" and \(a"q\(hyparity\(a"
files. You should not store your data in them.
.PP
The list of files is saved in the \(a"content\(a" files, usually
stored in the data, parity or boot disks.
These files contain the details of your backup, with all the
checksums to verify its integrity.
The \(a"content\(a" file is stored in multiple copies, and each one must
be in a different disk, to ensure that in even in case of multiple
disk failures at least one copy is available.
.PP
For example, suppose that you are interested only at one parity level
of protection, and that your disks are present in:
.PP
.RS 4
/mnt/diskpar <\(hy selected disk for parity
.PD 0
.PP
.PD
/mnt/disk1 <\(hy first disk to backup
.PD 0
.PP
.PD
/mnt/disk2  <\(hy second disk to backup
.PD 0
.PP
.PD
/mnt/disk3 <\(hy third disk to backup
.PD 0
.PP
.PD
.RE
.PP
you have to create the configuration file /etc/snapraid.conf with
the following options:
.PP
.RS 4
parity /mnt/diskpar/parity
.PD 0
.PP
.PD
content /var/snapraid/content
.PD 0
.PP
.PD
content /mnt/disk1/content
.PD 0
.PP
.PD
content /mnt/disk2/content
.PD 0
.PP
.PD
disk d1 /mnt/disk1/
.PD 0
.PP
.PD
disk d2 /mnt/disk2/
.PD 0
.PP
.PD
disk d3 /mnt/disk3/
.PD 0
.PP
.PD
.RE
.PP
If you are in Windows, you should use drive letters and backslashes
instead of slashes, and if you like, also file extensions.
.PP
.RS 4
parity E:\(rspar\(rsparity.par
.PD 0
.PP
.PD
content C:\(rssnapraid\(rscontent.lst
.PD 0
.PP
.PD
content F:\(rsarray\(rscontent.lst
.PD 0
.PP
.PD
content G:\(rsarray\(rscontent.lst
.PD 0
.PP
.PD
disk d1 F:\(rsarray\(rs
.PD 0
.PP
.PD
disk d2 G:\(rsarray\(rs
.PD 0
.PP
.PD
disk d3 H:\(rsarray\(rs
.PD 0
.PP
.PD
.RE
.PP
At this point you are ready to start the \(a"sync\(a" command to build the
redundancy information.
.PP
.RS 4
snapraid sync
.PD 0
.PP
.PD
.RE
.PP
This process may take some hours the first time, depending on the size
of the data already present in the disks. If the disks are empty
the process is immediate.
.PP
You can stop it at any time pressing Ctrl+C, and at the next run it
will start where interrupted.
.PP
When this command completes, your data is SAFE.
.PP
At this point you can start using your array as you like, and periodically
update the redundancy information running the \(a"sync\(a" command.
.SS Pooling 
To have all the files in your array shown in the same directory tree,
you can enable \(a"pooling\(a", that consists in creating a virtual view of all
the files in your array using symbolic links.
You can configure the \(a"pooling\(a" directory in the configuration file with:
.PP
.RS 4
pool /pool
.PD 0
.PP
.PD
.RE
.PP
or, if you are in Windows, with:
.PP
.RS 4
pool C:\(rspool
.PD 0
.PP
.PD
.RE
.PP
and then run the \(a"pool\(a" command.
.PP
.RS 4
snapraid pool
.PD 0
.PP
.PD
.RE
.SS Checking & Fixing 
To check the integrity of your data you can use the \(a"check\(a" command:
.PP
.RS 4
snapraid check
.PD 0
.PP
.PD
.RE
.PP
If will read all your data, to check if it\(cqs correct.
.PP
If an error is found, you can use the \(a"fix\(a" command to fix it.
.PP
.RS 4
snapraid fix
.PD 0
.PP
.PD
.RE
.PP
Note that the fix command will revert your data at the state of the
last \(a"sync\(a" command executed. It works like a snapshot was taken
in \(a"sync\(a".
.PP
In this regard SnapRAID is more like a backup program than a RAID
system. For example, you can use it to recover from an accidentally
deleted directory, simply running the fix command using the
\(hym, \(hy\(hyfilter\(hymissing filter, like:
.PP
.RS 4
snapraid fix \(hym \(hyf DIR/
.PD 0
.PP
.PD
.RE
.PP
Or to simply recover one file you can use:
.PP
.RS 4
snapraid fix \(hym \(hyf FILE
.PD 0
.PP
.PD
.RE
.PP
Or to recover all the delete files with:
.PP
.RS 4
snapraid fix \(hym
.PD 0
.PP
.PD
.RE
.SH COMMANDS 
SnapRAID provides four simple commands that allow to:
.PD 0
.IP \(bu
Make a backup/snapshot \(hy> \(a"sync\(a"
.IP \(bu
See the files changed from the previous sync \(hy> \(a"diff\(a"
.IP \(bu
Check for integrity \(hy> \(a"check\(a"
.IP \(bu
Restore the last backup/snapshot \(hy> \(a"fix\(a".
.PD
.PP
Take care that the commands have to be written in lower case.
.SS sync 
Updates the redundancy information. All the modified files
in the disk array are read, and the redundancy data is
recomputed.
.PP
Files are identified by inode and checked by time and size,
meaning that you can move them on the disk without triggering
any redundancy recomputation.
.PP
You can stop this process at any time pressing Ctrl+C,
without losing the work already done.
.PP
The \(a"content\(a", \(a"parity\(a" and \(a"q\(hyparity\(a" files are modified if necessary.
The files in the array are NOT modified.
.SS pool 
Creates or updates in the \(a"pooling\(a" directory a virtual view of all
the files of your disk array.
.PP
The files are not really copied here, but just linked using
symbolic links.
.PP
When updating, all the present symbolic links and empty
subdirectories are deleted and replaced with the new
view of the array. Any othe regular file is left in place.
.PP
Nothing is modified outside the pool directory.
.SS diff 
Lists all the files modified from the last \(a"sync\(a" command that
have to recompute their redundancy data.
.PP
Nothing is modified.
.SS dup 
Lists all the duplicate files. Two files are assumed equal if their
hashes are matching. The effective data is not read.
.PP
Nothing is modified.
.SS check 
Checks all the files and the redundancy data.
All the files are hashed and compared with the snapshot saved
in the previous \(a"sync\(a" command.
.PP
If you use the \(hya, \(hy\(hyaudit\(hyonly option, only the file
data is checked, and the redundandy data is ignored.
.PP
Files are identified by path, and checked by content.
Nothing is modified.
.SS fix 
Checks and fix all the files. It\(cqs like \(a"check\(a" but it
also tries to fix problems reverting the state of the
disk array to the previous \(a"sync\(a" command.
.PP
After a successful \(a"fix\(a", you should also run a \(a"sync\(a"
command to update the new state of the files.
.PP
All the files that cannot be fixed are renamed adding
the \(a".unrecoverable\(a" extension.
.PP
The \(a"content\(a" file is NOT modified.
The \(a"parity\(a" and \(a"q\(hyparity\(a" files are modified if necessary.
The files in the array are modified if necessary.
.SH OPTIONS 
SnapRAID provides the following options:
.TP
.B \(hyc, \(hy\(hyconf CONFIG
Selects the configuration file. If not specified it\(cqs assumed
the file \(a"/etc/snapraid.conf\(a" in Unix, and \(a"snapraid.conf\(a" in
the current directory in Windows.
.TP
.B \(hyf, \(hy\(hyfilter PATTERN
Filters the files to process in the \(a"check\(a" and \(a"fix\(a"
commands.
Only the files matching the entered pattern are processed.
This option can be used many times.
See the PATTERN section for more details in the
pattern specifications.
In Unix, ensure to quote globbing chars if used.
This option can be used only with the \(a"check\(a" and \(a"fix\(a" commands.
Note that it cannot be used with \(a"sync\(a", because \(a"sync\(a" always
process the whole array.
.TP
.B \(hyd, \(hy\(hyfilter\(hydisk NAME
Filters the files to process in the \(a"check\(a" and \(a"fix\(a"
commands.
Only the files present in the specified disk are processed.
You must specify a disk name as named in the configuration
file.
In \(a"check\(a", you can make it faster, specifing also \(hya, \(hy\(hyaudit\(hyonly
option, to avoid to access other disks to check parity data.
If you combine more \(hy\(hyfilter, \(hy\(hyfilter\(hydisk and \(hy\(hyfilter\(hymissing options,
only files matching all the set of filters are selected.
This option can be used many times.
This option can be used only with the \(a"check\(a" and \(a"fix\(a" commands.
Note that it cannot be used with \(a"sync\(a", because \(a"sync\(a" always
process the whole array.
.TP
.B \(hyn, \(hy\(hyfilter\(hymissing
Filters the files to process in the \(a"check\(a" and \(a"fix\(a"
commands.
Only the files missing/deleted from the array are processed.
When used with \(a"fix\(a", this is a kind of \(a"undelete\(a" command.
If you combine more \(hy\(hyfilter, \(hy\(hyfilter\(hydisk and \(hy\(hyfilter\(hymissing options,
only files matching all the set of filters are selected.
This option can be used only with the \(a"check\(a" and \(a"fix\(a" commands.
Note that it cannot be used with \(a"sync\(a", because \(a"sync\(a" always
process the whole array.
.TP
.B \(hya, \(hy\(hyaudit\(hyonly
When checking, only verify the hash of the files, without
doing any kind of check on the redundancy data.
If you are interested in checking only the file data this
option can speedup a lot the checking process.
This option can be used only with the \(a"check\(a" command.
.TP
.B \(hyi, \(hy\(hyimport DIR
When fixing imports from the specified directory any file
that you deleted from the array after the last \(a"sync\(a"
commmand.
If you still have such files, they could be used by the \(a"fix\(a"
command to improve the recover process.
The files are read also in subdirectories and they are
identified regardless of their name.
This option can be used only with the \(a"check\(a" and \(a"fix\(a" command.
.TP
.B \(hyN, \(hy\(hyfind\(hyby\(hyname
When syncing finds the files by path instead than by inode,
and ignores the nanosecond part of timestamp.
This option allows a fast sync command after having replaced
one physical disk with another, copying manually the files.
Without this option the \(a"sync\(a" command recognizes that
the files were copied to a different disk, and it will resync
them all. With this option, a file with the correct path,
size and time with second precision is assumed identical at
the previous one, and not resynched.
The nanosecond part of timestamps is ignored because most of
copy programs are not able to correctly restore it.
This option can be used only with the \(a"sync\(a" and \(a"diff\(a" commands.
.TP
.B \(hyZ, \(hy\(hyforce\(hyzero
Forces the insecure operation of syncing a file with zero
size that before was not.
If SnapRAID detects a such condition, it stops proceeding
unless you specify this option.
This allows to easily detect when after a system crash,
some accessed files were zeroed.
This is a possible condition in Linux with the ext3/ext4
filesystems.
This option can be used only with the \(a"sync\(a" command.
.TP
.B \(hyE, \(hy\(hyforce\(hyempty
Forces the insecure operation of syncing a disk with all
the original files missing.
If SnapRAID detects that all the files originally present
in the disk are missing or rewritten, it stops proceeding
unless you specify this option.
This allows to easily detect when a data file\(hysystem is not
mounted.
This option can be used only with the \(a"sync\(a" command.
.TP
.B \(hys, \(hy\(hystart BLKSTART
Starts the processing from the specified
block number. It could be useful to easy retry to check
or fix some specific block, in case of a damaged disk.
.TP
.B \(hyt, \(hy\(hycount BLKCOUNT
Process only the specified number of blocks.
It\(cqs present mainly for advanced manual recovering.
.TP
.B \(hyl, \(hy\(hylog FILE
Outputs a detailed log to the specified file.
It contains the exact specification of which block of
any file is not recoverable and why.
You can use the special files \(a"1\(a" and \(a"2\(a" to output
to stdout and stderr.
If this option is not specified, no detailed log is
generated.
.TP
.B \(hyv, \(hy\(hyverbose
Prints more information in the processing.
.TP
.B \(hyh, \(hy\(hyhelp
Prints a short help screen.
.TP
.B \(hyV, \(hy\(hyversion
Prints the program version.
.SH CONFIGURATION 
SnapRAID requires a configuration file to know where your disk array
is located, and where storing the redundancy information.
.PP
This configuration file is located in /etc/snapraid.conf in Unix or
in the execution directory in Windows.
.PP
It should contain the following options (case sensitive):
.SS parity FILE 
Defines the file to use to store the parity information.
The parity enables the protection from a single disk
failure, like RAID5.
.PP
It must be placed in a disk dedicated for this purpose with
as much free space as the biggest disk in the array.
Leaving the parity disk reserved for only this file ensures that
it doesn\(cqt get fragmented, improving the performance.
.PP
This option is mandatory and it can be used only one time.
.SS q\(hyparity FILE 
Defines the file to use to store the q\(hyparity information.
If present, the q\(hyparity enables the protection from two disk
failures, like RAID6.
.PP
It must be placed in a disk dedicated for this purpose with
as much free space as the biggest disk in the array.
Leaving the q\(hyparity disk reserved for only this file ensures that
it doesn\(cqt get fragmented, improving the performance.
.PP
This option is optional and it can be used only one time.
.SS content FILE 
Defines the file to use to store the list and checksums of all the
files present in your disk array.
.PP
It can be placed in the disk used to store data, parity, or
any other disk available.
If you use a data disk, this file is automatically excluded
from the \(a"sync\(a" process.
.PP
This option is mandatory and it can be used more time to save
more copies of the same files.
.PP
You have to store at least one copy for each parity disk used
plus one. Using some more don\(cqt hurt.
.SS disk NAME DIR 
Defines the name and the mount point of the disks of the array.
NAME is used to identify the disk, and it must be unique.
DIR is the mount point of the disk in the filesystem.
.PP
You can change the mount point as you like, as long you
keep the NAME fixed.
.PP
You should use one option for each disk of the array.
.SS nohidden 
Excludes all the hidden files and directory.
In Unix hidden files are the ones starting with \(a".\(a".
In Windows they are the ones with the hidden attribute.
.SS exclude/include PATTERN 
Defines the file or directory patterns to exclude and include
in the sync process.
All the patterns are processed in the specified order.
.PP
If the first pattern that matches is an \(a"exclude\(a" one, the file
is excluded. If it\(cqs an \(a"include\(a" one, the file is included.
If no pattern matches, the file is excluded if the last pattern
specified is an \(a"include\(a", or included if the last pattern
specified is an \(a"exclude\(a".
.PP
See the PATTERN section for more details in the pattern
specifications.
.PP
This option can be used many times.
.SS block_size SIZE_IN_KIBIBYTES 
Defines the basic block size in kibi bytes of the redundancy
blocks. Where one kibi bytes is 1024 bytes.
The default is 256 and it should work for most conditions.
You could increase this value if you do not have enough RAM
memory to run SnapRAID.
.PP
As a rule of thumb, with 4 GiB or more memory use the default 256,
with 2 GiB use 512, and with 1 GiB use 1024.
.PP
In more details SnapRAID requires about TS*24/BS bytes
of RAM memory to run. Where TS is the total size in bytes of
your disk array, and BS is the block size in bytes.
.PP
For example with 6 disk of 2 TiB and a block size of 256 KiB
(1 KiB = 1024 Bytes) you have:
.PP
RAM = (6 * 2 * 2^40) * 24 / (256 * 2^10) = 1.1 GiB
.PD 0
.PP
.PD
.PP
You could instead decrease this value if you have a lot of
small files in the disk array. For each file, even if of few
bytes, a whole block is always allocated, so you may have a lot
of unused space.
As approximation, you can assume that half of the block size is
wasted for each file.
.PP
For example, with 10000 files and a 256 KiB block size, you are
going to waste 1.2 GiB.
.SS autosave SIZE_IN_GIBIBYTES 
Automatically save the state when synching after the specied amount
of GiB processed.
This option is useful to avoid to restart from scratch long \(a"sync\(a"
commands interrupted by a machine crash, or any other event that
may interrupt SnapRAID.
The SIZE argument is specified in gibibytes. Where one gibi bytes
is 1073741824 bytes.
.SS pool DIR 
Defines the pooling directory where the virtual view of the disk
array is created using the \(a"pool\(a" command.
.SS Examples 
An example of a typical configuration for Unix is:
.PP
.RS 4
parity /mnt/diskpar/parity
.PD 0
.PP
.PD
content /mnt/diskpar/content
.PD 0
.PP
.PD
content /var/snapraid/content
.PD 0
.PP
.PD
disk d1 /mnt/disk1/
.PD 0
.PP
.PD
disk d2 /mnt/disk2/
.PD 0
.PP
.PD
disk d3 /mnt/disk3/
.PD 0
.PP
.PD
exclude *.bak
.PD 0
.PP
.PD
exclude /lost+found/
.PD 0
.PP
.PD
exclude /tmp/
.PD 0
.PP
.PD
.RE
.PP
An example of a typical configuration for Windows is:
.PP
.RS 4
parity E:\(rspar\(rsparity
.PD 0
.PP
.PD
content E:\(rspar\(rscontent
.PD 0
.PP
.PD
content C:\(rssnapraid\(rscontent
.PD 0
.PP
.PD
disk d1 G:\(rsarray\(rs
.PD 0
.PP
.PD
disk d2 H:\(rsarray\(rs
.PD 0
.PP
.PD
disk d3 I:\(rsarray\(rs
.PD 0
.PP
.PD
exclude *.bak
.PD 0
.PP
.PD
exclude Thumbs.db
.PD 0
.PP
.PD
exclude \(rs$RECYCLE.BIN
.PD 0
.PP
.PD
exclude \(rsSystem Volume Information
.PD 0
.PP
.PD
.RE
.SH PATTERN 
Patterns are used to select a subset of files to exclude or include in
the process.
.PP
There are four different types of patterns:
.TP
.B FILE
Selects any file named as FILE. You can use any globbing
character like * and ?.
This pattern is applied only to files and not to directories.
.TP
.B DIR/
Selects any directory named DIR. You can use any globbing
character like * and ?.
This pattern is applied only to directories and not to files.
.TP
.B /PATH/FILE
Selects the exact specified file path. You can use any
globbing character like * and ? but they never match a
directory slash.
This pattern is applied only to files and not to directories.
.TP
.B /PATH/DIR/
Selects the exact specified directory path. You can use any
globbing character like * and ? but they never match a
directory slash.
This pattern is applied only to directories and not to files.
.PP
In Windows you can freely use the backslash \(rs instead of the forward slash /.
.PP
Note that Windows system directories, junction to directories,
mount points, and any other Windows special directory is treated just
as a file, meaning that to exclude it you must use a file rule, and
not a directory one.
.PP
In the configuration file, you can use different strategies to filter
the files to process.
The simplest one is to use only \(a"exclude\(a" rules to remove all the
files and directories you do not want to process. For example:
.PP
.RS 4
# Excludes any file named \(a"*.bak\(a"
.PD 0
.PP
.PD
exclude *.bak
.PD 0
.PP
.PD
# Excludes the root directory \(a"/lost+found\(a"
.PD 0
.PP
.PD
exclude /lost+found/
.PD 0
.PP
.PD
# Excludes any sub\(hydirectory named \(a"tmp\(a"
.PD 0
.PP
.PD
exclude tmp/
.PD 0
.PP
.PD
.RE
.PP
The opposite way is to define only the file you want to process, using
only \(a"include\(a" rules. For example:
.PP
.RS 4
# Includes only some directories
.PD 0
.PP
.PD
include /movies/
.PD 0
.PP
.PD
include /musics/
.PD 0
.PP
.PD
include /pictures/
.PD 0
.PP
.PD
.RE
.PP
The final way, is to mix \(a"exclude\(a" and \(a"include\(a" rules. In this case take
care that the order of rules is important. Previous rules have the
precedence over the later ones.
To get things simpler you can first have all the \(a"exclude\(a" rules and then
all the \(a"include\(a" ones. For example:
.PP
.RS 4
# Excludes any file named \(a"*.bak\(a"
.PD 0
.PP
.PD
exclude *.bak
.PD 0
.PP
.PD
# Excludes any sub\(hydirectory named \(a"tmp\(a"
.PD 0
.PP
.PD
exclude tmp/
.PD 0
.PP
.PD
# Includes only some directories
.PD 0
.PP
.PD
include /movies/
.PD 0
.PP
.PD
include /musics/
.PD 0
.PP
.PD
include /pictures/
.PD 0
.PP
.PD
.RE
.PP
On the command line, using the \(hyf option, you can only use \(a"include\(a"
patterns. For example:
.PP
.RS 4
# Checks only the .mp3 files.
.PD 0
.PP
.PD
# Note the \(a"\(a" use to avoid globbing expansion by the shell in Unix.
.PD 0
.PP
.PD
snapraid \(hyf \(a"*.mp3\(a" check
.PD 0
.PP
.PD
.RE
.PP
In Unix, when using globbing chars in the command line, you have to quote them.
Otherwise the shell will try to expand them.
.SH RECOVERING 
The worst happened, and you lost a disk!
.PP
DO NOT PANIC! You will be able to recover it!
.PP
The first thing you have to do is to avoid futher changes at you disk array.
Disable any remote connection to it, any scheduled process, including any
scheduled SnapRAID nightly sync.
.PP
Then proceed with the following steps.
.SS STEP 1 \(hy> Reconfigure 
You need some space to recover, even better if you already have an additional
disk, but in case, also an external USB or remote one is enough.
.PP
Change the SnapRAID configuration file and make the \(a"disk\(a" option
of the failed disk to point to a place where you have enough empty space
to recover the files.
.PP
For example, if you have that disk \(a"d1\(a" failed, you can change:
.PP
.RS 4
disk d1 /mnt/disk1/
.PD 0
.PP
.PD
.RE
.PP
to:
.PP
.RS 4
disk d1 /mnt/new_spare_disk/
.PD 0
.PP
.PD
.RE
.SS STEP 2 \(hy> Fix 
Run the fix command, storing the log in an external file with:
.PP
.RS 4
snapraid \(hyd NAME fix 2>fix.log
.PD 0
.PP
.PD
.RE
.PP
Where NAME is the name of the disk, like \(a"d1\(a" as in our previous example.
.PP
This command will take a long time.
.PP
Take care that you need also few gigabytes free to store the fix.log file.
Run it from a disk with some free space.
.PP
Now you have recovered all the recoverable. If some file is partially or totally
unrecoverable, it will be renamed adding the \(a".unrecoverable\(a" extension.
.PP
You can get a detailed list of all the unrecoverable blocks in the fix.log file
checking all the lines starting with \(a"unrecoverable:\(a"
.PP
If you are not satified of the recovering, you can retry it as many time you wish.
For example, if you have moved away some files from other disks after the last \(a"sync\(a",
you can retry to put them inplace, and retry the \(a"fix\(a".
.PP
If you are satisfied of the recovering, you can now proceed further,
but take care that after synching you will no more able to retry the
\(a"fix\(a" command!
.SS STEP 3 \(hy> Check 
As paranoid check, you can now run a whole \(a"check\(a" command to ensure that
everything is OK.
.PP
.RS 4
snapraid \(hyd NAME \(hya check
.PD 0
.PP
.PD
.RE
.PP
Where NAME is the name of the disk, like \(a"d1\(a" as in our previous example.
.PP
The options \(hyd and \(hya tell SnapRAID to check only the specified disk,
and ignore all the other data and redundancy disks.
.PP
This command will take a long time.
.SS STEP 4 \(hy> Sync 
Run the \(a"sync\(a" command to resyncronize the array with the new disk.
.PP
To avoid a long time sync you can use the \(a"\(hy\(hyfind\(hyby\(hyname\(a" option to
force SnapRAID to ignore the fact that all the recovered files are now in
a different physical disk, but they are not changed.
.PP
.RS 4
snapraid \(hy\(hyfind\(hyby\(hyname sync
.PD 0
.PP
.PD
.RE
.PP
If everything was recovered, this command is immediate.
.SH CONTENT 
SnapRAID stores the list and checksums of your files in the content file.
.PP
It\(cqs a text file, listing all the files present in your disk array,
with all the checksums to verify their integrity.
.PP
You do not need to understand its format, but it\(cqs described here
for documentation.
.PP
This file is read and written by the \(a"sync\(a" command, and only read by
\(a"fix\(a" and \(a"check\(a".
.SS blk_size SIZE 
Defines the size of the block in bytes. It must match the size
defined in the configuration file.
.SS checksum CHECKSUM 
Defines the checksum kind used. It can be only \(a"murmur3\(a".
From SnapRAID 2.0 the old \(a"md5\(a" checksum is not supported anymore.
.SS map NAME INDEX 
Defines the position INDEX of the disk NAME in the parity computation.
.SS sign SIGN 
Signature checksum of the content file to ensure that it doesn\(cqt get
corrupted. If you want to modify the content file manually, you have
to remove this line to avoid this check.
.SS file DISK SIZE TIME_SEC[.TIME_NSEC] INODE PATH 
Defines a file in the specified DISK.
.PP
The INODE number is used to identify the file in the \(a"sync\(a"
command, allowing to rename or move the file in disk without
the need to recompute the parity for it.
.PP
The SIZE and TIME information are used to identify if the file
changed from the last \(a"sync\(a" command, and if there is the need
to recompute the parity.
.PP
The [.TIME_NSEC] information is optional, and only present if
it\(cqs possible to read a such precise time information.
It\(cqs present only from SnapRAID 2.0.
.PP
The PATH information is used in the \(a"check\(a" and \(a"fix\(a" commands
to identify the file.
.SS blk BLOCK HASH 
Defines an ordered parity block, part of the last defined file.
.PP
BLOCK is the block position in the \(a"parity\(a" file.
0 for the first block, 1 for the second one and so on.
.PP
HASH is the hash of the block. In the last block of the file,
the HASH is the hash of only the used part of the block.
.SS new BLOCK 
Like \(a"blk\(a", but for new allocated blocks for which the hash is not
yet computed, and the stored parity doesn\(cqt take into account this
new block.
.PP
This field is used only when you interrupt manually the \(a"sync\(a"
command.
.SS chg BLOCK 
Like \(a"blk\(a", but for reallocated blocks for which the hash is not
yet computed, and the parity is computed using the previous value
of the block.
.PP
This field is used only when you interrupt manually the \(a"sync\(a"
command.
.SS hole DISK 
Defines the list of blocks that are deleted from a disk.
.PP
This field is used only when you interrupt manually the \(a"sync\(a"
command.
.SS off BLOCK 
Defines a block deleted from a disk, part of the last defined hole,
for which the parity is computed using the previous value.
.PP
This field is used only when you interrupt manually the \(a"sync\(a"
command.
.SS symlink DISK PATH 
Defines a symbolic link in the specified DISK.
.SS hardlink DISK PATH 
Defines a hard link in the specified DISK.
.SS to PATH 
Defines where the previous symlink or hardlink links to.
.SS dir DISK PATH 
Defines an empty directory in the specified DISK.
.PP
Directory that contains saved files, are not included, as they
are implicitely defined in the file specifications.
.SH PARITY 
SnapRAID stores the redundancy information of your array in the parity
and q\(hyparity files.
.PP
They are binary files, containing the computed redundancy of all the
blocks defined in the \(a"content\(a" file.
.PP
You do not need to understand its format, but it\(cqs described here
for documentation.
.PP
These files are read and written by the \(a"sync\(a" and \(a"fix\(a" commands, and
only read by \(a"check\(a".
.PP
For all the blocks at a given position, the parity and the q\(hyparity
are computed as specified in:
.PP
.RS 4
http://kernel.org/pub/linux/kernel/people/hpa/raid6.pdf
.PD 0
.PP
.PD
.RE
.PP
When a file block is shorter than the default block size, for example
because it\(cqs the last block of a file, it\(cqs assumed as filled with 0
at the end.
.SH ENCODING 
SnapRAID in Unix ignores any encoding. It simply reads and stores the
file names with the same encoding used by the filesystem.
.PP
In Windows all the names read from the filesystem are converted and
processed in the UTF\(hy8 format.
.PP
To have the file names printed correctly you have to set the Windows
console in the UTF\(hy8 mode, with the command \(a"chcp 65001\(a", and use
a TrueType font like \(a"Lucida Console\(a" as console font.
Note that it has effect only on the printed file names, if you
redirect the console output to a file, the resulting file is always
in the UTF\(hy8 format.
.SH COPYRIGHT 
This file is Copyright (C) 2011 Andrea Mazzoleni
.SH SEE ALSO 
rsync(1)
